{
  "css.lint.unknownAtRules": "ignore",
  "scss.lint.unknownAtRules": "ignore",
  "less.lint.unknownAtRules": "ignore",
  "tailwindCSS.includeLanguages": {
    "css": "css"
  },
  "tailwindCSS.emmetCompletions": true,
  "tailwindCSS.validate": true,
  "tailwindCSS.lint.invalidApply": "ignore",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "eslint.validate": ["javascript", "javascriptreact", "typescript", "typescriptreact"],
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.formatOnType": false,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "prettier.requireConfig": true,
  "prettier.useEditorConfig": true,
  "eslint.useFlatConfig": true,
  "eslint.enable": true,
  "eslint.run": "onType",
  "eslint.debug": true,
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "prettier.useTabs": false,
  "prettier.tabWidth": 2,
  "editor.renderWhitespace": "boundary",
  "editor.renderControlCharacters": true,
  "editor.detectIndentation": false,
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // GitHub Copilot settings
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "scminput": true
  },
  "github.copilot.advanced": {
    "secret_key": "github.copilot.enable",
    "length": 500,
    "temperature": "",
    "top_p": "",
    "stop": {
      "*": ["\n\n\n"]
    },
    "indentationMode": {
      "*": "space",
      "makefile": "tab"
    },
    "inlineSuggestCount": 3
  },
  // Git commit message settings
  "git.inputValidation": true,
  "git.inputValidationLength": 200,
  "git.inputValidationSubjectLength": 200,
  "scm.inputFontFamily": "SF Mono, Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace",
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Use conventional commit message format. <type> <scope>: <description>\n\nExamples:\n- feat(auth): add login functionality\n- fix(ui): correct button alignment\n- chore(deps): update dependencies to latest versions"
    }
  ]
}
